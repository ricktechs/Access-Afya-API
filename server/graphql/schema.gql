scalar Date
enum Role {
  staff
  user
}

type Query {
  getAllUsers: [User]
  getAllVisits: [Visit]
}

type Mutation {
  signUp(email: String!, password: String!, name: String!): AuthPayload
  signIn(email: String!, password: String!): AuthPayload
  addAssessment(
    name: String!
    issues: IssuesFeedInput
    patients: PatientsFeedInput
    revenue: RevenueFeedInput
    staffId: String
  ): Visit

  updateAssessment(
    visitId: String!
    issues: IssuesFeedInput
    patients: PatientsFeedInput
    revenue: RevenueFeedInput
    staffId: String!
  ): Visit
}

type User {
  name: String!
  email: String!
  password: String!
  roles: [Role]
  issuesReported: [IssuesFeed]
}
type Visit {
  _id: String
  name: String
  issues: [IssuesFeed]
  patients: [PatientsFeed]
  ratings: [RatingsFeed]
  createdAt: Date
}

type AuthPayload {
  user: User
}

type RatingsFeed {
  nps: Int
  createdAt: Date
}

type IssuesFeed {
  badPrescription: Int
  labDelay: Int
  lateCheckIn: Int
  openedLate: Int
  carelessWasteDisposal: Int
  prescription: Int
  staffId: String
  createdAt: Date
}

type PatientsFeed {
  count: Int
  createdAt: Date
}
type RevenueFeed {
  revenue: Float
  createdAt: Date
}

#
#
# input types
#
#

input IssuesFeedInput {
  badPrescription: Int
  labDelay: Int
  lateCheckIn: Int
  openedLate: Int
  carelessWasteDisposal: Int
  prescription: Int
  staffId: String
}

input PatientsFeedInput {
  count: Int
}
input RevenueFeedInput {
  revenue: Float
}
